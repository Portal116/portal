package algorismProject2;

import java.util.Comparator;

public class BinTree<K, V> {
	static class Node<K, V> {
		private K key;
		private V data;
		private Node<K, V> left;
		private Node<K, V> right;

		public Node(K key, V data, Node<K, V> left, Node<K, V> right) {
			this.key = key;
			this.data = data;
			this.left = left;
			this.right = right;
		}

		K getKey() {
			return key;
		}

		V getValue() {
			return data;
		}

		void print() {
			System.out.println(data);
		}
	}// end Node class

	private Node<K, V> root; // ·çÆ®
	private Comparator<? super K> comparator = null;// ºñ±³ÀÚ

	public BinTree() {
		root = null;
	}

	public BinTree(Comparator<? super K> c) {
		this(); // ±âº»»ý¼ºÀÚ È£Ãâ
		comparator = c;
	}

	// (Comparable<K>) key1).compareTo(key2) - ºñ±³¹æ¹ý Ã³À½¿¡ root¿¡ ´Þ¾Æ ÁÙ¶§
	// comparator.compare(key1, key2) - ³ëµå°¡ 1°³ÀÌ»ó ´Þ·Á ÀÖ¾î¼­ ºñ±³ÇÒ ´ë»óÀÌ ÀÖ´Â °æ¿ì
	private int comp(K key1, K key2) { // 383page 64ÁÙ¿¡¼­ È£­Œ
		return (comparator == null) ? ((Comparable<K>) key1).compareTo(key2) : comparator.compare(key1, key2);
	}

	// Å°¿¡ ÀÇÇÑ °Ë»ö
	public V search(K key) {
		Node<K, V> p = root;// ±Ù³ëµåÀÇ ÁÖ¼Ò¸¦ pº¯¼ö¿¡
		while (true) {
			if (p == null)
				return null;
			int cond = comp(key, p.getKey());
			if (cond == 0)
				return p.getValue();
			else if (cond < 0)
				p = p.left;
			else
				p = p.right;
		}
	}

	// ³ëµå »ðÀÔÇÏ±â
	private void addNode(Node<K, V> node, K key, V data) {
		int cond = comp(key, node.getKey());
		if (cond == 0)
			return; // ÀÌ¹Ì Æ®¸®¿¡ ´Þ·Á ÀÖ´Â °æ¿ì
		else if (cond < 0) { // ¿ÞÂÊ °¡Áö·Î ´Þ¾ÆÁÖ´Â °æ¿ì
			if (node.left == null)
				node.left = new Node<K, V>(key, data, null, null);
			else
				addNode(node.left, key, data);
		} else { // ¿À¸¥ÂÊ °¡Áö·Î ´Þ¾Æ ÁÖ´Â °æ¿ì
			if (node.right == null)
				node.right = new Node<K, V>(key, data, null, null);
			else
				addNode(node.right, key, data);
		}
	}

	// »ðÀÔÇÒ ¶§ ³ëµå°¡ ÇÑ°³µµ ¾È´Þ·Á ÀÖÀ» ¶§¿Í ÇÑ°³ÀÌ»ó ´Þ·Á ÀÖÀ» ¶§¸¦ ÆÇ´ÜÇØ¼­ À§ÀÇ ³ëµå »ðÀÔ¸Þ¼Òµå·Î È£ÃâÇÔ
	public void add(K key, V data) {
		if (root == null)
			root = new Node<K, V>(key, data, null, null);
		else
			addNode(root, key, data);
	}

	public boolean remove(K key) {
		Node<K, V> p = root;
		Node<K, V> parent = null;
		boolean isLeftChild = true;
		// »èÁ¦ÇÒ ³ëµåÀÇ À§Ä¡¸¦ Ã£±â
		while (true) {
			if (p == null)
				return false;
			int cond = comp(key, p.getKey());
			if (cond == 0)
				break;
			else {
				parent = p;
				if (cond < 0) {
					isLeftChild = true;
					p = p.left;
				} else {
					isLeftChild = false;
					p = p.right;
				}
			}
		} // end while
		if (p.left == null) { // ±×¸² 10-14ÀÇ 3À» Áö¿ì´Â °æ¿ì
			if (p == root)
				root = p.right;
			else if (isLeftChild)
				parent.left = p.right;
			else
				parent.right = p.right;
		} else if (p.right == null) {
			if (p == root)
				root = p.left;
			else if (isLeftChild)
				parent.left = p.left;
			else
				parent.right = p.left;
		} else {
			parent = p;
			Node<K, V> left = p.left;
			isLeftChild = true;
			while (left.right != null) {
				parent = left;
				left = left.right;
				isLeftChild = false;
			}
			p.key = left.key;
			p.data = left.data;
			if (isLeftChild)
				parent.left = left.left;
			else
				parent.right = left.left;
		}
		return true;
	}

	private void printSubTree(Node node) {
		if (node != null) {
			printSubTree(node.left);
			System.out.println(node.key + " " + node.data);
			printSubTree(node.right);
		} else {
			System.out.println("µî·ÏµÈ »óÇ°ÀÌ ¾ø½À´Ï´Ù.");
		}
	}

	public void print() {
		printSubTree(root);
	}
}