package Order;

import java.util.*;
import java.util.Date;
import java.sql.*;

public class OrderDAO {
	String driver="com.mysql.cj.jdbc.Driver";
	String url="jdbc:mysql://localhost:3306/shopmallmanagedb";
	String userid="root"; 
	String passwd="1234";
	
	public OrderDAO(){
		try{
		Class.forName(driver);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	// 주문정보 보기
	public ArrayList<OrderDTO> select(){
		ArrayList<OrderDTO> list = new ArrayList<OrderDTO>();
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try{
			con = DriverManager.getConnection(url, userid, passwd);
			String query = "SELECT * FROM order";
			pstmt = con.prepareStatement(query);
			rs = pstmt.executeQuery();
			
			while(rs.next()){
				OrderDTO dto = new OrderDTO();
				dto.setOrderNo(rs.getInt("orderNo"));
				dto.setID(rs.getString("ID"));
				dto.setProductNo(rs.getInt("productNo"));
				dto.setOrderAmount(rs.getInt("orderAmount"));
				dto.setOrderDate(rs.getString("orderDate"));
				list.add(dto);
			}
		} catch(Exception e) {
			e.printStackTrace();
		} finally {
			try {
			if(rs != null) rs.close();
			if(pstmt != null) pstmt.close();
			if(con != null) con.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return list;
	} // end 주문정보 보기
	
	// 주문정보 저장
	public int insert(String orderNo, String ID, String productNo, String orderAmount, String orderDate){
		Connection con = null;
		PreparedStatement pstmt = null;
		int n = 0;
		
		try{
			con = DriverManager.getConnection(url, userid, passwd);
			String sql = "INSERT INTO order(name, age, height, weight, sex)" +	" VALUES(?, ?, ?, ?, ?)";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, Integer.parseInt(orderNo));
			pstmt.setString(2, ID);
			pstmt.setInt(3, Integer.parseInt(productNo));
			pstmt.setInt(4, Integer.parseInt(orderAmount));
			pstmt.setString(5, orderDate);
			n = pstmt.executeUpdate();
		} catch(Exception e) { 
			e.printStackTrace();
		} finally {
			try{
				if(pstmt != null) pstmt.close();
				if(con != null) con.close();
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		return n;
	} // end 주문정보 저장
	
	// 주문정보 삭제
	public int delete(String orderNo){
		Connection con = null;
		PreparedStatement pstmt = null;
		int n = 0;		
		try{
			con = DriverManager.getConnection(url, userid, passwd);
			String sql = "DELETE FROM order WHERE orderNo = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, Integer.parseInt(orderNo));
			n = pstmt.executeUpdate();
		}catch(Exception e){
			e.printStackTrace();
		}finally{
		try{
			if(pstmt != null) pstmt.close();
			if(con != null) con.close();
			}catch(Exception e){
				e.printStackTrace();
			}
		}
		return n;
	} // end 주문정보 삭제
	
	// 주문정보 수정
	public int update(String orderNo, String ID, String productNo, String orderAmount, String orderDate){
		Connection con = null;
		PreparedStatement pstmt = null;
		int n = 0;
		
		try{
			con = DriverManager.getConnection(url, userid, passwd);
			String sql = "UPDATE order SET ID=?, productNo=?, " +
			" orderAmount=?, orderDate=? WHERE orderNo = ?";
			
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, Integer.parseInt(orderNo));
			pstmt.setString(2, ID);
			pstmt.setInt(3, Integer.parseInt(productNo));
			pstmt.setInt(4, Integer.parseInt(orderAmount));
			pstmt.setString(5, orderDate);
			n = pstmt.executeUpdate();
		}catch(Exception e){e.printStackTrace();
		}finally{
			try{
			if(pstmt != null)pstmt.close();
			if(con != null)con.close();
			}catch(Exception e){e.printStackTrace();}
		}
		return n;
	} // end 주문정보 수정
	
	// 주문정보 조회에 사용할 name 존재 여부 체크
	public boolean isExist(String orderNo){
		boolean result = false;
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		try{
			con = DriverManager.getConnection(url, userid, passwd);
			String sql = "SELECT * FROM order WHERE orderNo = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, Integer.parseInt(orderNo));
			rs = pstmt.executeQuery();
			while(rs.next()){
				result = true;
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
			try{
			if(rs != null) rs.close();
			if(pstmt != null) pstmt.close();
			if(con != null) con.close();
			}catch(Exception e){e.printStackTrace();}
		}
		return result;
	}
	
	// 주문정보 조회
	public OrderDTO search(String orderNo)throws RecordNotFoundException{
		if (!isExist(orderNo))
			throw new RecordNotFoundException("\"" + orderNo + "\"는 없습니다.");
		OrderDTO dto = new OrderDTO();
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try{
			con = DriverManager.getConnection(url, userid, passwd);
			String sql = "SELECT * FROM member WHERE orderNo = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, Integer.parseInt(orderNo));
			rs = pstmt.executeQuery();
			
			while(rs.next()){
				dto.setOrderNo(rs.getInt("orderNo"));
				dto.setID(rs.getString("ID"));
				dto.setProductNo(rs.getInt("productNo"));
				dto.setOrderAmount(rs.getInt("orderAmount"));
				dto.setOrderDate(rs.getString("orderDate"));
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
		try{
			if(rs != null) rs.close();
			if(pstmt != null) pstmt.close();
			if(con != null) con.close();
			}catch(Exception e){e.printStackTrace();}
		}
		return dto;
	} // end 주문 정보 조회
	
	// 주문정보 조회
	public OrderDTO search(String productNo) throws RecordNotFoundException{
		OrderDTO dto = new OrderDTO();
		Connection con = null;
		PreparedStatement pstmt = null;
		ResultSet rs = null;
		
		try{
			con = DriverManager.getConnection(url, userid, passwd);
			String sql = "SELECT * FROM member WHERE productNo = ?";
			pstmt = con.prepareStatement(sql);
			pstmt.setInt(1, Integer.parseInt(productNo));
			rs = pstmt.executeQuery();
			
			while(rs.next()){
				dto.setOrderNo(rs.getInt("orderNo"));
				dto.setID(rs.getString("ID"));
				dto.setProductNo(rs.getInt("productNo"));
				dto.setOrderAmount(rs.getInt("orderAmount"));
				dto.setOrderDate(rs.getString("orderDate"));
			}
		}catch(Exception e){
			e.printStackTrace();
		}finally{
		try{
			if(rs != null) rs.close();
			if(pstmt != null) pstmt.close();
			if(con != null) con.close();
			}catch(Exception e){e.printStackTrace();}
		}
		return dto;
	} // end 주문 정보 조회
}